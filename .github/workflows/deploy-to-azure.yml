name: Build and Deploy to Azure

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'streamlit_app.py'
      - 'image_analyzer.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.dockerignore'
      - 'infra/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'streamlit_app.py'
      - 'image_analyzer.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.dockerignore'
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      force_rebuild:
        description: 'Force container rebuild'
        required: false
        default: false
        type: boolean

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  CONTAINER_NAME: streamlit-app
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  APP_SERVICE_NAME: ${{ secrets.AZURE_APP_SERVICE_NAME }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3

    - name: 'Log in to Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Log in to Azure Container Registry'
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

    - name: 'Extract metadata'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 'Build and push container image'
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: 'Run Trivy vulnerability scanner'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: 'Upload Trivy scan results to GitHub Security tab'
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Log in to Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Deploy to Azure App Service'
      id: deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APP_SERVICE_NAME }}
        images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest

    - name: 'Wait for deployment to complete'
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 30

    - name: 'Health check'
      run: |
        APP_URL="https://${{ env.APP_SERVICE_NAME }}.azurewebsites.net"
        echo "Checking health of $APP_URL"
        
        # Wait up to 5 minutes for the app to be ready
        for i in {1..30}; do
          if curl -f -s --max-time 10 "$APP_URL/_stcore/health" > /dev/null; then
            echo "✅ App is healthy!"
            echo "🌐 Application URL: $APP_URL"
            break
          else
            echo "⏳ Waiting for app to be ready... (attempt $i/30)"
            sleep 10
          fi
          
          if [ $i -eq 30 ]; then
            echo "❌ Health check failed after 5 minutes"
            echo "🔍 Check the App Service logs for details"
            exit 1
          fi
        done

    - name: 'Post deployment notification'
      if: success()
      run: |
        echo "🎉 Deployment successful!"
        echo "📦 Image: ${{ needs.build.outputs.image-tag }}"
        echo "🌐 URL: https://${{ env.APP_SERVICE_NAME }}.azurewebsites.net"
        echo "📊 Digest: ${{ needs.build.outputs.image-digest }}"

  test:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Set up Python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 'Install dependencies'
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests

    - name: 'Run integration tests'
      run: |
        APP_URL="https://${{ env.APP_SERVICE_NAME }}.azurewebsites.net"
        
        # Test basic connectivity
        echo "Testing basic connectivity..."
        curl -f --max-time 30 "$APP_URL" > /dev/null
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f --max-time 10 "$APP_URL/_stcore/health" > /dev/null
        
        echo "✅ All integration tests passed!"

  cleanup:
    runs-on: ubuntu-latest
    needs: [build, deploy, test]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 'Log in to Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Clean up old container images'
      run: |
        echo "Cleaning up old container images..."
        
        # Keep only the latest 5 images
        az acr repository show-tags \
          --name ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --repository ${{ env.CONTAINER_NAME }} \
          --orderby time_desc \
          --output tsv | tail -n +6 | while read tag; do
            if [ ! -z "$tag" ] && [ "$tag" != "latest" ]; then
              echo "Deleting old image: $tag"
              az acr repository delete \
                --name ${{ env.AZURE_CONTAINER_REGISTRY }} \
                --image ${{ env.CONTAINER_NAME }}:$tag \
                --yes
            fi
        done || echo "No old images to clean up"
